//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Net.Security;
using WCF = global::System.ServiceModel;

namespace Service.ServiceContracts
{
	/// <summary>
	/// Service Contract Class - InsuranceContract
	/// </summary>
	[WCF::ServiceContract(Namespace = "http://CareManagement.Model/2012/Insurance", Name = "InsuranceContract", SessionMode = WCF::SessionMode.Allowed, ProtectionLevel = ProtectionLevel.None )]
	public partial interface IInsuranceContract 
	{
		[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "AddInsurer", ReplyAction = "addinsurer", ProtectionLevel = ProtectionLevel.None)]
		void AddInsurer(Service.MessageContracts.InsurerRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "DeleteInsurer", ReplyAction = "deleteinsurer", ProtectionLevel = ProtectionLevel.None)]
		void DeleteInsurer(Service.MessageContracts.InsurerRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetInsurer", ReplyAction = "getinsurer", ProtectionLevel = ProtectionLevel.None)]
		Service.MessageContracts.InsurerMessage GetInsurer(Service.MessageContracts.InsurerIdRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "UpdateInsurer", ReplyAction = "updateinsurer", ProtectionLevel = ProtectionLevel.None)]
		void UpdateInsurer(Service.MessageContracts.InsurerRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetInsurersByAccount", ReplyAction = "getinsurersbyaccount", ProtectionLevel = ProtectionLevel.None)]
		Service.MessageContracts.InsurersMessage GetInsurersByAccount(Service.MessageContracts.AccountIdInsuranceRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "AddAuthorizationFollowUp", ReplyAction = "addauthorizationfollowup", ProtectionLevel = ProtectionLevel.None)]
		void AddAuthorizationFollowUp(Service.MessageContracts.AuthorizationFollowUpRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "DeleteAuthorizationFollowUp", ReplyAction = "deleteauthorizationfollowup", ProtectionLevel = ProtectionLevel.None)]
		void DeleteAuthorizationFollowUp(Service.MessageContracts.AuthorizationFollowUpRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "UpdateAuthorizationFollowUp", ReplyAction = "updateauthorizationfollowup", ProtectionLevel = ProtectionLevel.None)]
		void UpdateAuthorizationFollowUp(Service.MessageContracts.AuthorizationFollowUpRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAuthorizationFollowUpsByAccount", ReplyAction = "getauthorizationfollowupbyaccount", ProtectionLevel = ProtectionLevel.None)]
		Service.MessageContracts.AuthorizationFollowUpsMessage GetAuthorizationFollowUpsByAccount(Service.MessageContracts.AccountIdInsuranceRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAuthorizationFollowUpsByAuthorizationRequest", ReplyAction = "getauthorizationfollowupsbyauthorization", ProtectionLevel = ProtectionLevel.None)]
		Service.MessageContracts.AuthorizationFollowUpsMessage GetAuthorizationFollowUpsByAuthorizationRequest(Service.MessageContracts.AuthorizationRequestIdMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAuthorizationFollowUp", ReplyAction = "getauthorizationfollowup", ProtectionLevel = ProtectionLevel.None)]
		Service.MessageContracts.AuthorizationFollowUpMessage GetAuthorizationFollowUp(Service.MessageContracts.AuthorizationFollowUpIdRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "AddAuthorizationRequest", ReplyAction = "addauthorizationrequest", ProtectionLevel = ProtectionLevel.None)]
		void AddAuthorizationRequest(Service.MessageContracts.AuthorizationRequestRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "DeleteAuthorizationRequest", ReplyAction = "deleteauthorizationrequest", ProtectionLevel = ProtectionLevel.None)]
		void DeleteAuthorizationRequest(Service.MessageContracts.AuthorizationRequestRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "UpdateAuthorizationRequest", ReplyAction = "updateauthorizationrequest", ProtectionLevel = ProtectionLevel.None)]
		void UpdateAuthorizationRequest(Service.MessageContracts.AuthorizationRequestRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAuthorizationRequest", ReplyAction = "getauthorizationrequest", ProtectionLevel = ProtectionLevel.None)]
		Service.MessageContracts.AuthorizationRequestMessage GetAuthorizationRequest(Service.MessageContracts.AuthorizationRequestIdMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAuthorizationRequestsByAccount", ReplyAction = "getauthorizationrequestsbyaccount", ProtectionLevel = ProtectionLevel.None)]
		Service.MessageContracts.AuthorizationRequestsMessage GetAuthorizationRequestsByAccount(Service.MessageContracts.AccountIdInsuranceRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAuthorizationRequestsByInsurer", ReplyAction = "getauthorizationrequestsbyinsurer", ProtectionLevel = ProtectionLevel.None)]
		Service.MessageContracts.AuthorizationRequestsMessage GetAuthorizationRequestsByInsurer(Service.MessageContracts.InsurerIdRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "AddAuthorizationNote", ReplyAction = "addauthorizationnote", ProtectionLevel = ProtectionLevel.None)]
		void AddAuthorizationNote(Service.MessageContracts.AuthorizationNoteRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "DeleteAuthorizationNote", ReplyAction = "deleteauthorizationnote", ProtectionLevel = ProtectionLevel.None)]
		void DeleteAuthorizationNote(Service.MessageContracts.AuthorizationNoteRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "UpdateAuthorizationNote", ReplyAction = "updateauthorizationnote", ProtectionLevel = ProtectionLevel.None)]
		void UpdateAuthorizationNote(Service.MessageContracts.AuthorizationNoteRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAuthorizationNote", ReplyAction = "getauthorizationnote", ProtectionLevel = ProtectionLevel.None)]
		Service.MessageContracts.AuthorizationNoteMessage GetAuthorizationNote(Service.MessageContracts.AuthorizationNoteIdRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAuthorizationNotesByAccount", ReplyAction = "getauthorizationnotesbyaccount", ProtectionLevel = ProtectionLevel.None)]
		Service.MessageContracts.AuthorizationNotesMessage GetAuthorizationNotesByAccount(Service.MessageContracts.AccountIdInsuranceRequestMessage request);
		
[WCF::OperationContract(IsTerminating = false, IsInitiating = true, IsOneWay = false, AsyncPattern = false, Action = "GetAuthorizationNotesByAuthorizationRequest", ReplyAction = "getauthorizationnotesbyauthorizationrequest", ProtectionLevel = ProtectionLevel.None)]
		Service.MessageContracts.AuthorizationNotesMessage GetAuthorizationNotesByAuthorizationRequest(Service.MessageContracts.AuthorizationRequestIdMessage request);
		
	}
}

