//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using WCF = global::System.ServiceModel;

namespace Service.ServiceImplementation
{	
	/// <summary>
	/// Service Class - InsuranceService
	/// </summary>
	[WCF::ServiceBehavior(Name = "InsuranceService", 
		Namespace = "http://CareManagement.Model/2012/Insurance", 
		InstanceContextMode = WCF::InstanceContextMode.PerSession, 
		ConcurrencyMode = WCF::ConcurrencyMode.Single )]
	public abstract class InsuranceServiceBase : Service.ServiceContracts.IInsuranceContract
	{
		#region InsuranceContract Members

		public virtual void AddInsurer(Service.MessageContracts.InsurerRequestMessage request)
		{
			
		}

		public virtual void DeleteInsurer(Service.MessageContracts.InsurerRequestMessage request)
		{
			
		}

		public virtual Service.MessageContracts.InsurerMessage GetInsurer(Service.MessageContracts.InsurerIdRequestMessage request)
		{
			return null;
		}

		public virtual void UpdateInsurer(Service.MessageContracts.InsurerRequestMessage request)
		{
			
		}

		public virtual Service.MessageContracts.InsurersMessage GetInsurersByAccount(Service.MessageContracts.AccountIdInsuranceRequestMessage request)
		{
			return null;
		}

		public virtual void AddAuthorizationFollowUp(Service.MessageContracts.AuthorizationFollowUpRequestMessage request)
		{
			
		}

		public virtual void DeleteAuthorizationFollowUp(Service.MessageContracts.AuthorizationFollowUpRequestMessage request)
		{
			
		}

		public virtual void UpdateAuthorizationFollowUp(Service.MessageContracts.AuthorizationFollowUpRequestMessage request)
		{
			
		}

		public virtual Service.MessageContracts.AuthorizationFollowUpsMessage GetAuthorizationFollowUpsByAccount(Service.MessageContracts.AccountIdInsuranceRequestMessage request)
		{
			return null;
		}

		public virtual Service.MessageContracts.AuthorizationFollowUpsMessage GetAuthorizationFollowUpsByAuthorizationRequest(Service.MessageContracts.AuthorizationRequestIdMessage request)
		{
			return null;
		}

		public virtual Service.MessageContracts.AuthorizationFollowUpMessage GetAuthorizationFollowUp(Service.MessageContracts.AuthorizationFollowUpIdRequestMessage request)
		{
			return null;
		}

		public virtual void AddAuthorizationRequest(Service.MessageContracts.AuthorizationRequestRequestMessage request)
		{
			
		}

		public virtual void DeleteAuthorizationRequest(Service.MessageContracts.AuthorizationRequestRequestMessage request)
		{
			
		}

		public virtual void UpdateAuthorizationRequest(Service.MessageContracts.AuthorizationRequestRequestMessage request)
		{
			
		}

		public virtual Service.MessageContracts.AuthorizationRequestMessage GetAuthorizationRequest(Service.MessageContracts.AuthorizationRequestIdMessage request)
		{
			return null;
		}

		public virtual Service.MessageContracts.AuthorizationRequestsMessage GetAuthorizationRequestsByAccount(Service.MessageContracts.AccountIdInsuranceRequestMessage request)
		{
			return null;
		}

		public virtual Service.MessageContracts.AuthorizationRequestsMessage GetAuthorizationRequestsByInsurer(Service.MessageContracts.InsurerIdRequestMessage request)
		{
			return null;
		}

		public virtual void AddAuthorizationNote(Service.MessageContracts.AuthorizationNoteRequestMessage request)
		{
			
		}

		public virtual void DeleteAuthorizationNote(Service.MessageContracts.AuthorizationNoteRequestMessage request)
		{
			
		}

		public virtual void UpdateAuthorizationNote(Service.MessageContracts.AuthorizationNoteRequestMessage request)
		{
			
		}

		public virtual Service.MessageContracts.AuthorizationNoteMessage GetAuthorizationNote(Service.MessageContracts.AuthorizationNoteIdRequestMessage request)
		{
			return null;
		}

		public virtual Service.MessageContracts.AuthorizationNotesMessage GetAuthorizationNotesByAccount(Service.MessageContracts.AccountIdInsuranceRequestMessage request)
		{
			return null;
		}

		public virtual Service.MessageContracts.AuthorizationNotesMessage GetAuthorizationNotesByAuthorizationRequest(Service.MessageContracts.AuthorizationRequestIdMessage request)
		{
			return null;
		}

		#endregion		
		
	}
	
	public partial class InsuranceService : InsuranceServiceBase
	{
	}
	
}

