//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Service.Client.MedicalServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Facility", Namespace="http://schemas.datacontract.org/2004/07/Infrastructure.Model.Medical")]
    [System.SerializableAttribute()]
    public partial class Facility : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] CurrentVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountId {
            get {
                return this.AccountIdField;
            }
            set {
                if ((this.AccountIdField.Equals(value) != true)) {
                    this.AccountIdField = value;
                    this.RaisePropertyChanged("AccountId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] CurrentVersion {
            get {
                return this.CurrentVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentVersionField, value) != true)) {
                    this.CurrentVersionField = value;
                    this.RaisePropertyChanged("CurrentVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Provider", Namespace="http://schemas.datacontract.org/2004/07/Infrastructure.Model.Medical")]
    [System.SerializableAttribute()]
    public partial class Provider : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] CurrentVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FacilityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] CurrentVersion {
            get {
                return this.CurrentVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentVersionField, value) != true)) {
                    this.CurrentVersionField = value;
                    this.RaisePropertyChanged("CurrentVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FacilityId {
            get {
                return this.FacilityIdField;
            }
            set {
                if ((this.FacilityIdField.Equals(value) != true)) {
                    this.FacilityIdField = value;
                    this.RaisePropertyChanged("FacilityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MedicalAppointment", Namespace="http://schemas.datacontract.org/2004/07/Infrastructure.Model.Medical")]
    [System.SerializableAttribute()]
    public partial class MedicalAppointment : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTimeOffset AppointmentDateTimeUtcField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<Service.Client.MedicalServiceReference.ScheduleUnits> AppointmentLengthUnitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] CurrentVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<decimal> LengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProviderIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountId {
            get {
                return this.AccountIdField;
            }
            set {
                if ((this.AccountIdField.Equals(value) != true)) {
                    this.AccountIdField = value;
                    this.RaisePropertyChanged("AccountId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset AppointmentDateTimeUtc {
            get {
                return this.AppointmentDateTimeUtcField;
            }
            set {
                if ((this.AppointmentDateTimeUtcField.Equals(value) != true)) {
                    this.AppointmentDateTimeUtcField = value;
                    this.RaisePropertyChanged("AppointmentDateTimeUtc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<Service.Client.MedicalServiceReference.ScheduleUnits> AppointmentLengthUnits {
            get {
                return this.AppointmentLengthUnitsField;
            }
            set {
                if ((this.AppointmentLengthUnitsField.Equals(value) != true)) {
                    this.AppointmentLengthUnitsField = value;
                    this.RaisePropertyChanged("AppointmentLengthUnits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] CurrentVersion {
            get {
                return this.CurrentVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentVersionField, value) != true)) {
                    this.CurrentVersionField = value;
                    this.RaisePropertyChanged("CurrentVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProviderId {
            get {
                return this.ProviderIdField;
            }
            set {
                if ((this.ProviderIdField.Equals(value) != true)) {
                    this.ProviderIdField = value;
                    this.RaisePropertyChanged("ProviderId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScheduleUnits", Namespace="http://schemas.datacontract.org/2004/07/Infrastructure.Model.Scheduling")]
    public enum ScheduleUnits : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Minutes = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Hours = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://CareManagement.Model/2012/Medical", ConfigurationName="MedicalServiceReference.MedicalContract")]
    public interface MedicalContract {
        
        // CODEGEN: Generating message contract since the operation AddFacility is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://CareManagement.Model/2012/Medical/MedicalContract/AddFacility", ReplyAction="addfacility")]
        Service.Client.MedicalServiceReference.AddFacilityResponse AddFacility(Service.Client.MedicalServiceReference.FacilityMessage request);
        
        // CODEGEN: Generating message contract since the operation DeleteFacility is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://CareManagement.Model/2012/Medical/MedicalContract/DeleteFacility", ReplyAction="deletefacility")]
        Service.Client.MedicalServiceReference.DeleteFacilityResponse DeleteFacility(Service.Client.MedicalServiceReference.FacilityMessage request);
        
        // CODEGEN: Generating message contract since the operation UpdateFacility is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://CareManagement.Model/2012/Medical/MedicalContract/UpdateFacility", ReplyAction="updatefacility")]
        Service.Client.MedicalServiceReference.UpdateFacilityResponse UpdateFacility(Service.Client.MedicalServiceReference.FacilityMessage request);
        
        // CODEGEN: Generating message contract since the operation GetFacility is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://CareManagement.Model/2012/Medical/MedicalContract/GetFacility", ReplyAction="getfacility")]
        Service.Client.MedicalServiceReference.FacilityMessage GetFacility(Service.Client.MedicalServiceReference.FacilityIdMessage request);
        
        // CODEGEN: Generating message contract since the operation GetFacilitiesByAccount is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="GetFacilitiesByAccount", ReplyAction="getfacilitiesbyaccount")]
        Service.Client.MedicalServiceReference.FacilitiesMessage GetFacilitiesByAccount(Service.Client.MedicalServiceReference.AccountIdMessage request);
        
        // CODEGEN: Generating message contract since the operation AddProvider is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="AddProvider", ReplyAction="addprovider")]
        Service.Client.MedicalServiceReference.AddProviderResponse AddProvider(Service.Client.MedicalServiceReference.ProviderMessage request);
        
        // CODEGEN: Generating message contract since the operation DeleteProvider is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="DeleteProvider", ReplyAction="deleteprovider")]
        Service.Client.MedicalServiceReference.DeleteProviderResponse DeleteProvider(Service.Client.MedicalServiceReference.ProviderMessage request);
        
        // CODEGEN: Generating message contract since the operation UpdateProvider is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="UpdateProvider", ReplyAction="updateprovider")]
        Service.Client.MedicalServiceReference.UpdateProviderResponse UpdateProvider(Service.Client.MedicalServiceReference.ProviderMessage request);
        
        // CODEGEN: Generating message contract since the operation GetProvider is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="GetProvider", ReplyAction="getprovider")]
        Service.Client.MedicalServiceReference.ProviderMessage GetProvider(Service.Client.MedicalServiceReference.ProviderIdMessage request);
        
        // CODEGEN: Generating message contract since the operation GetProviderByAccount is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="GetProviderByAccount", ReplyAction="getproviderbyaccount")]
        Service.Client.MedicalServiceReference.ProvidersMessage GetProviderByAccount(Service.Client.MedicalServiceReference.AccountIdMessage request);
        
        // CODEGEN: Generating message contract since the operation GetProviderByFacility is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="GetProviderByFacility", ReplyAction="getproviderbyfacility")]
        Service.Client.MedicalServiceReference.ProvidersMessage GetProviderByFacility(Service.Client.MedicalServiceReference.FacilityIdMessage request);
        
        // CODEGEN: Generating message contract since the operation AddMedicalAppointment is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="AddMedicalAppointment", ReplyAction="addmedicalappointment")]
        Service.Client.MedicalServiceReference.AddMedicalAppointmentResponse AddMedicalAppointment(Service.Client.MedicalServiceReference.MedicalAppointmentMessage request);
        
        // CODEGEN: Generating message contract since the operation DeleteMedicalAppointment is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="DeleteMedicalAppointment", ReplyAction="deletemedicalappointment")]
        Service.Client.MedicalServiceReference.DeleteMedicalAppointmentResponse DeleteMedicalAppointment(Service.Client.MedicalServiceReference.MedicalAppointmentMessage request);
        
        // CODEGEN: Generating message contract since the operation UpdateMedicalAppointment is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="UpdateMedicalAppointment", ReplyAction="updatemedicalappointment")]
        Service.Client.MedicalServiceReference.UpdateMedicalAppointmentResponse UpdateMedicalAppointment(Service.Client.MedicalServiceReference.MedicalAppointmentMessage request);
        
        // CODEGEN: Generating message contract since the operation GetMedicalAppointment is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="GetMedicalAppointment", ReplyAction="getmedicalappointment")]
        Service.Client.MedicalServiceReference.MedicalAppointmentMessage GetMedicalAppointment(Service.Client.MedicalServiceReference.MedicalAppointmentIdMessage request);
        
        // CODEGEN: Generating message contract since the operation GetMedicalAppointmentsByAccount is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="GetMedicalAppointmentsByAccount", ReplyAction="GetMedicalAppointmentsByAccount")]
        Service.Client.MedicalServiceReference.MedicalAppointmentsMessage GetMedicalAppointmentsByAccount(Service.Client.MedicalServiceReference.AccountIdMessage request);
        
        // CODEGEN: Generating message contract since the operation GetMedicalAppointmentsByFacility is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="GetMedicalAppointmentsByFacility", ReplyAction="getmedicalappointmentsbyfacility")]
        Service.Client.MedicalServiceReference.MedicalAppointmentsMessage GetMedicalAppointmentsByFacility(Service.Client.MedicalServiceReference.FacilityIdMessage request);
        
        // CODEGEN: Generating message contract since the operation GetMedicalAppointmentsByProvider is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="GetMedicalAppointmentsByProvider", ReplyAction="getmedicalappointmentsbyprovider")]
        Service.Client.MedicalServiceReference.MedicalAppointmentsMessage GetMedicalAppointmentsByProvider(Service.Client.MedicalServiceReference.ProviderIdMessage request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class FacilityMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://CareManagement.Model/2012/Medical", Order=0)]
        public Service.Client.MedicalServiceReference.Facility Facility;
        
        public FacilityMessage() {
        }
        
        public FacilityMessage(Service.Client.MedicalServiceReference.Facility Facility) {
            this.Facility = Facility;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddFacilityResponse {
        
        public AddFacilityResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteFacilityResponse {
        
        public DeleteFacilityResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateFacilityResponse {
        
        public UpdateFacilityResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class FacilityIdMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://CareManagement.Model/2012/Medical", Order=0)]
        public int FacilityId;
        
        public FacilityIdMessage() {
        }
        
        public FacilityIdMessage(int FacilityId) {
            this.FacilityId = FacilityId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AccountIdMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://CareManagement.Model/2012/Insurance", Order=0)]
        public int AccountId;
        
        public AccountIdMessage() {
        }
        
        public AccountIdMessage(int AccountId) {
            this.AccountId = AccountId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class FacilitiesMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://CareManagement.Model/2012/Medical", Order=0)]
        public Service.Client.MedicalServiceReference.Facility[] Facilities;
        
        public FacilitiesMessage() {
        }
        
        public FacilitiesMessage(Service.Client.MedicalServiceReference.Facility[] Facilities) {
            this.Facilities = Facilities;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ProviderMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://CareManagement.Model/2012/Medical", Order=0)]
        public Service.Client.MedicalServiceReference.Provider Provider;
        
        public ProviderMessage() {
        }
        
        public ProviderMessage(Service.Client.MedicalServiceReference.Provider Provider) {
            this.Provider = Provider;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddProviderResponse {
        
        public AddProviderResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteProviderResponse {
        
        public DeleteProviderResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateProviderResponse {
        
        public UpdateProviderResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ProviderIdMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://CareManagement.Model/2012/Medical", Order=0)]
        public int ProviderId;
        
        public ProviderIdMessage() {
        }
        
        public ProviderIdMessage(int ProviderId) {
            this.ProviderId = ProviderId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ProvidersMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://CareManagement.Model/2012/Medical", Order=0)]
        public Service.Client.MedicalServiceReference.Provider[] Providers;
        
        public ProvidersMessage() {
        }
        
        public ProvidersMessage(Service.Client.MedicalServiceReference.Provider[] Providers) {
            this.Providers = Providers;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class MedicalAppointmentMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://CareManagement.Model/2012/Medical", Order=0)]
        public Service.Client.MedicalServiceReference.MedicalAppointment MedicalAppointment;
        
        public MedicalAppointmentMessage() {
        }
        
        public MedicalAppointmentMessage(Service.Client.MedicalServiceReference.MedicalAppointment MedicalAppointment) {
            this.MedicalAppointment = MedicalAppointment;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AddMedicalAppointmentResponse {
        
        public AddMedicalAppointmentResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class DeleteMedicalAppointmentResponse {
        
        public DeleteMedicalAppointmentResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UpdateMedicalAppointmentResponse {
        
        public UpdateMedicalAppointmentResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class MedicalAppointmentIdMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://CareManagement.Model/2012/Medical", Order=0)]
        public int MedicalAppointmentId;
        
        public MedicalAppointmentIdMessage() {
        }
        
        public MedicalAppointmentIdMessage(int MedicalAppointmentId) {
            this.MedicalAppointmentId = MedicalAppointmentId;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class MedicalAppointmentsMessage {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://CareManagement.Model/2012/Medical", Order=0)]
        public Service.Client.MedicalServiceReference.MedicalAppointment[] MedicalAppointments;
        
        public MedicalAppointmentsMessage() {
        }
        
        public MedicalAppointmentsMessage(Service.Client.MedicalServiceReference.MedicalAppointment[] MedicalAppointments) {
            this.MedicalAppointments = MedicalAppointments;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MedicalContractChannel : Service.Client.MedicalServiceReference.MedicalContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MedicalContractClient : System.ServiceModel.ClientBase<Service.Client.MedicalServiceReference.MedicalContract>, Service.Client.MedicalServiceReference.MedicalContract {
        
        public MedicalContractClient() {
        }
        
        public MedicalContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MedicalContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MedicalContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MedicalContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.AddFacilityResponse Service.Client.MedicalServiceReference.MedicalContract.AddFacility(Service.Client.MedicalServiceReference.FacilityMessage request) {
            return base.Channel.AddFacility(request);
        }
        
        public void AddFacility(Service.Client.MedicalServiceReference.Facility Facility) {
            Service.Client.MedicalServiceReference.FacilityMessage inValue = new Service.Client.MedicalServiceReference.FacilityMessage();
            inValue.Facility = Facility;
            Service.Client.MedicalServiceReference.AddFacilityResponse retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).AddFacility(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.DeleteFacilityResponse Service.Client.MedicalServiceReference.MedicalContract.DeleteFacility(Service.Client.MedicalServiceReference.FacilityMessage request) {
            return base.Channel.DeleteFacility(request);
        }
        
        public void DeleteFacility(Service.Client.MedicalServiceReference.Facility Facility) {
            Service.Client.MedicalServiceReference.FacilityMessage inValue = new Service.Client.MedicalServiceReference.FacilityMessage();
            inValue.Facility = Facility;
            Service.Client.MedicalServiceReference.DeleteFacilityResponse retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).DeleteFacility(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.UpdateFacilityResponse Service.Client.MedicalServiceReference.MedicalContract.UpdateFacility(Service.Client.MedicalServiceReference.FacilityMessage request) {
            return base.Channel.UpdateFacility(request);
        }
        
        public void UpdateFacility(Service.Client.MedicalServiceReference.Facility Facility) {
            Service.Client.MedicalServiceReference.FacilityMessage inValue = new Service.Client.MedicalServiceReference.FacilityMessage();
            inValue.Facility = Facility;
            Service.Client.MedicalServiceReference.UpdateFacilityResponse retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).UpdateFacility(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.FacilityMessage Service.Client.MedicalServiceReference.MedicalContract.GetFacility(Service.Client.MedicalServiceReference.FacilityIdMessage request) {
            return base.Channel.GetFacility(request);
        }
        
        public Service.Client.MedicalServiceReference.Facility GetFacility(int FacilityId) {
            Service.Client.MedicalServiceReference.FacilityIdMessage inValue = new Service.Client.MedicalServiceReference.FacilityIdMessage();
            inValue.FacilityId = FacilityId;
            Service.Client.MedicalServiceReference.FacilityMessage retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).GetFacility(inValue);
            return retVal.Facility;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.FacilitiesMessage Service.Client.MedicalServiceReference.MedicalContract.GetFacilitiesByAccount(Service.Client.MedicalServiceReference.AccountIdMessage request) {
            return base.Channel.GetFacilitiesByAccount(request);
        }
        
        public Service.Client.MedicalServiceReference.Facility[] GetFacilitiesByAccount(int AccountId) {
            Service.Client.MedicalServiceReference.AccountIdMessage inValue = new Service.Client.MedicalServiceReference.AccountIdMessage();
            inValue.AccountId = AccountId;
            Service.Client.MedicalServiceReference.FacilitiesMessage retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).GetFacilitiesByAccount(inValue);
            return retVal.Facilities;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.AddProviderResponse Service.Client.MedicalServiceReference.MedicalContract.AddProvider(Service.Client.MedicalServiceReference.ProviderMessage request) {
            return base.Channel.AddProvider(request);
        }
        
        public void AddProvider(Service.Client.MedicalServiceReference.Provider Provider) {
            Service.Client.MedicalServiceReference.ProviderMessage inValue = new Service.Client.MedicalServiceReference.ProviderMessage();
            inValue.Provider = Provider;
            Service.Client.MedicalServiceReference.AddProviderResponse retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).AddProvider(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.DeleteProviderResponse Service.Client.MedicalServiceReference.MedicalContract.DeleteProvider(Service.Client.MedicalServiceReference.ProviderMessage request) {
            return base.Channel.DeleteProvider(request);
        }
        
        public void DeleteProvider(Service.Client.MedicalServiceReference.Provider Provider) {
            Service.Client.MedicalServiceReference.ProviderMessage inValue = new Service.Client.MedicalServiceReference.ProviderMessage();
            inValue.Provider = Provider;
            Service.Client.MedicalServiceReference.DeleteProviderResponse retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).DeleteProvider(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.UpdateProviderResponse Service.Client.MedicalServiceReference.MedicalContract.UpdateProvider(Service.Client.MedicalServiceReference.ProviderMessage request) {
            return base.Channel.UpdateProvider(request);
        }
        
        public void UpdateProvider(Service.Client.MedicalServiceReference.Provider Provider) {
            Service.Client.MedicalServiceReference.ProviderMessage inValue = new Service.Client.MedicalServiceReference.ProviderMessage();
            inValue.Provider = Provider;
            Service.Client.MedicalServiceReference.UpdateProviderResponse retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).UpdateProvider(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.ProviderMessage Service.Client.MedicalServiceReference.MedicalContract.GetProvider(Service.Client.MedicalServiceReference.ProviderIdMessage request) {
            return base.Channel.GetProvider(request);
        }
        
        public Service.Client.MedicalServiceReference.Provider GetProvider(int ProviderId) {
            Service.Client.MedicalServiceReference.ProviderIdMessage inValue = new Service.Client.MedicalServiceReference.ProviderIdMessage();
            inValue.ProviderId = ProviderId;
            Service.Client.MedicalServiceReference.ProviderMessage retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).GetProvider(inValue);
            return retVal.Provider;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.ProvidersMessage Service.Client.MedicalServiceReference.MedicalContract.GetProviderByAccount(Service.Client.MedicalServiceReference.AccountIdMessage request) {
            return base.Channel.GetProviderByAccount(request);
        }
        
        public Service.Client.MedicalServiceReference.Provider[] GetProviderByAccount(int AccountId) {
            Service.Client.MedicalServiceReference.AccountIdMessage inValue = new Service.Client.MedicalServiceReference.AccountIdMessage();
            inValue.AccountId = AccountId;
            Service.Client.MedicalServiceReference.ProvidersMessage retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).GetProviderByAccount(inValue);
            return retVal.Providers;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.ProvidersMessage Service.Client.MedicalServiceReference.MedicalContract.GetProviderByFacility(Service.Client.MedicalServiceReference.FacilityIdMessage request) {
            return base.Channel.GetProviderByFacility(request);
        }
        
        public Service.Client.MedicalServiceReference.Provider[] GetProviderByFacility(int FacilityId) {
            Service.Client.MedicalServiceReference.FacilityIdMessage inValue = new Service.Client.MedicalServiceReference.FacilityIdMessage();
            inValue.FacilityId = FacilityId;
            Service.Client.MedicalServiceReference.ProvidersMessage retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).GetProviderByFacility(inValue);
            return retVal.Providers;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.AddMedicalAppointmentResponse Service.Client.MedicalServiceReference.MedicalContract.AddMedicalAppointment(Service.Client.MedicalServiceReference.MedicalAppointmentMessage request) {
            return base.Channel.AddMedicalAppointment(request);
        }
        
        public void AddMedicalAppointment(Service.Client.MedicalServiceReference.MedicalAppointment MedicalAppointment) {
            Service.Client.MedicalServiceReference.MedicalAppointmentMessage inValue = new Service.Client.MedicalServiceReference.MedicalAppointmentMessage();
            inValue.MedicalAppointment = MedicalAppointment;
            Service.Client.MedicalServiceReference.AddMedicalAppointmentResponse retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).AddMedicalAppointment(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.DeleteMedicalAppointmentResponse Service.Client.MedicalServiceReference.MedicalContract.DeleteMedicalAppointment(Service.Client.MedicalServiceReference.MedicalAppointmentMessage request) {
            return base.Channel.DeleteMedicalAppointment(request);
        }
        
        public void DeleteMedicalAppointment(Service.Client.MedicalServiceReference.MedicalAppointment MedicalAppointment) {
            Service.Client.MedicalServiceReference.MedicalAppointmentMessage inValue = new Service.Client.MedicalServiceReference.MedicalAppointmentMessage();
            inValue.MedicalAppointment = MedicalAppointment;
            Service.Client.MedicalServiceReference.DeleteMedicalAppointmentResponse retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).DeleteMedicalAppointment(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.UpdateMedicalAppointmentResponse Service.Client.MedicalServiceReference.MedicalContract.UpdateMedicalAppointment(Service.Client.MedicalServiceReference.MedicalAppointmentMessage request) {
            return base.Channel.UpdateMedicalAppointment(request);
        }
        
        public void UpdateMedicalAppointment(Service.Client.MedicalServiceReference.MedicalAppointment MedicalAppointment) {
            Service.Client.MedicalServiceReference.MedicalAppointmentMessage inValue = new Service.Client.MedicalServiceReference.MedicalAppointmentMessage();
            inValue.MedicalAppointment = MedicalAppointment;
            Service.Client.MedicalServiceReference.UpdateMedicalAppointmentResponse retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).UpdateMedicalAppointment(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.MedicalAppointmentMessage Service.Client.MedicalServiceReference.MedicalContract.GetMedicalAppointment(Service.Client.MedicalServiceReference.MedicalAppointmentIdMessage request) {
            return base.Channel.GetMedicalAppointment(request);
        }
        
        public Service.Client.MedicalServiceReference.MedicalAppointment GetMedicalAppointment(int MedicalAppointmentId) {
            Service.Client.MedicalServiceReference.MedicalAppointmentIdMessage inValue = new Service.Client.MedicalServiceReference.MedicalAppointmentIdMessage();
            inValue.MedicalAppointmentId = MedicalAppointmentId;
            Service.Client.MedicalServiceReference.MedicalAppointmentMessage retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).GetMedicalAppointment(inValue);
            return retVal.MedicalAppointment;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.MedicalAppointmentsMessage Service.Client.MedicalServiceReference.MedicalContract.GetMedicalAppointmentsByAccount(Service.Client.MedicalServiceReference.AccountIdMessage request) {
            return base.Channel.GetMedicalAppointmentsByAccount(request);
        }
        
        public Service.Client.MedicalServiceReference.MedicalAppointment[] GetMedicalAppointmentsByAccount(int AccountId) {
            Service.Client.MedicalServiceReference.AccountIdMessage inValue = new Service.Client.MedicalServiceReference.AccountIdMessage();
            inValue.AccountId = AccountId;
            Service.Client.MedicalServiceReference.MedicalAppointmentsMessage retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).GetMedicalAppointmentsByAccount(inValue);
            return retVal.MedicalAppointments;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.MedicalAppointmentsMessage Service.Client.MedicalServiceReference.MedicalContract.GetMedicalAppointmentsByFacility(Service.Client.MedicalServiceReference.FacilityIdMessage request) {
            return base.Channel.GetMedicalAppointmentsByFacility(request);
        }
        
        public Service.Client.MedicalServiceReference.MedicalAppointment[] GetMedicalAppointmentsByFacility(int FacilityId) {
            Service.Client.MedicalServiceReference.FacilityIdMessage inValue = new Service.Client.MedicalServiceReference.FacilityIdMessage();
            inValue.FacilityId = FacilityId;
            Service.Client.MedicalServiceReference.MedicalAppointmentsMessage retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).GetMedicalAppointmentsByFacility(inValue);
            return retVal.MedicalAppointments;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Service.Client.MedicalServiceReference.MedicalAppointmentsMessage Service.Client.MedicalServiceReference.MedicalContract.GetMedicalAppointmentsByProvider(Service.Client.MedicalServiceReference.ProviderIdMessage request) {
            return base.Channel.GetMedicalAppointmentsByProvider(request);
        }
        
        public Service.Client.MedicalServiceReference.MedicalAppointment[] GetMedicalAppointmentsByProvider(int ProviderId) {
            Service.Client.MedicalServiceReference.ProviderIdMessage inValue = new Service.Client.MedicalServiceReference.ProviderIdMessage();
            inValue.ProviderId = ProviderId;
            Service.Client.MedicalServiceReference.MedicalAppointmentsMessage retVal = ((Service.Client.MedicalServiceReference.MedicalContract)(this)).GetMedicalAppointmentsByProvider(inValue);
            return retVal.MedicalAppointments;
        }
    }
}
